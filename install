#!/usr/bin/env perl
use strict;
use Smart::Comments;
use lib './lib';
#
our $debug= 1;
our %hvn_info ; 
our %master_info ;
our %cvm_info  ;
our %coc_info  ;
our %csp_info  ;


sub usage {
    
print  <<'EOF';
Usage:
  sh  install [COMMAND] 
COMMAND:

no_passwd
menu_lst
time_sync
hostname
bridge
hyper_install
ssh_config
EOF

}
sub set_localtime {
    my $date = shift || "2013-12-12 12:00:00";
    my $cmd = "utility/set_localtime/set_localtime.sh $date"  ;
    &exe($cmd);
}
sub rename_cloudview{
    if(! -d cloudview ) 
    {
        my $val = &exe( 'mv  cloudview*  cloudview');
        return if $val;
    } else {
        return 
    }
    die "cloudview software is not in current directory,Please put it in!";
}
sub no_passwd {
    my $passwd =  "111111";
    my @nodelist=  @_;
    my $node= join "," ,@nodelist;
    my $cmd = "cd utility/nopasswd/; ./xmakessh --pass  $passwd --nodes  $node ; cd ../../ ";
    &exe( $cmd); 
}

sub menu_lst{
    my $mem =  shift || 4096; 
    my $cmd =  "utility/menu_lst/menu_list.sh $mem ";
    &exe($cmd);
}    

sub time_sync_server{
    my $date = shift || "2013-12-12 12:00:00";
    my $cmd = "utility/time_sync/ntp_server.sh \"$date\"";
    &exe($cmd);
} 
sub time_sync_client{
    my $server_ip = shift;
    my $cmd = "utility/time_sync/ntp_client.sh $server_ip"   ;
    &exe($cmd);
}

sub set_hostname{
    my $name = shift;
    my $cmd = "utility/hostname/hostname.sh  $name;   ";
    &exe($cmd);
} 
sub cp_hosts{
    my $cmd = "cp -rf /etc/hosts  /etc/hosts.bak; cp -rf  hosts /etc/hosts";
    -f 'hosts' or die "hosts file is not in current directory!";
    &exe($cmd);
} 

sub bridge{
    my $ip  = shift;
    my $eth = shift;
    my $br = shift;
    my $netmask = shift;
    my $cmd="utility/bridge/bridging.sh $ip  $eth $br $netmask ";
    &exe($cmd);
}
sub hyper_install{
    my  $cmd = "cd cloudview/Support/Supports/third-party_tools/cvm-hypervisor-install/cvm-hypervisor-install-3.0; sh install ;"     ;
    &exe($cmd);
}

sub ssh_config{
    my $cmd = "utility/ssh_config/no_enter_passwd.sh ";
    &exe($cmd);
}

sub virtual_service_on{
    my $cmd = "chkconfig xend on; chkconfig libvirtd on ;";
    $cmd .= "service xend start; service libvirtd start;";
    &exe($cmd);
}
sub exe {
    my $cmd = shift;
    if($debug){
      print "$cmd \n";
    }else{
 #     system($cmd);
 #   my $res = ShellRun::excute($cmd,undef, "&<STDIN",">&STDOUT");
 #   return $res;
    }
}
sub universe {
    my $ip1 = shift;
    my $hostname = shift; 
    my $ip2 =  shift;
    &set_hostname( $hostname); 
    &menu_lst(); 
    &ssh_config();
    &virtual_service_on();
    &cp_hosts;
    &bridge(   $ip1,
               "eth1",
               "br1",
               "16" 
               );
    &bridge(   $ip2,
               "eth0",
               "br0",
               "24"
               ) if $ip2;
}

sub hvn {
    my $ip = shift;
    my $master_ip = &get_master_ip; 
### do universe thing...
### %hvn_info
    &universe($ip,$hvn_info{$ip}{'hostname'},$hvn_info{$ip}{'ip2'});
### set up time ntp client...
    &time_sync_client($master_ip);
}

sub batch_hvn {
    foreach my $remote_ip (keys %hvn_info){
    my  $remote_command = "cd /root/cloudview_deploy/; install hvn $remote_ip";
    my $cmd =  "ssh $remote_ip  \"$remote_command \" "    ;
    &exe($cmd);
    }
}

sub send_tool{
    my $ip  = shift;
    my $cmd = "scp -r ../cloudview_deploy/  $ip:/root/ &"; 
    &exe($cmd);
}
sub log_info {
    my @info = @_;
    print "[INFO] " ,@info,"\n";   
}
sub get_nodelist{
    my @ip= keys %hvn_info;
    push @ip,&get_master_ip;
    return @ip;
}
sub get_master_ip{
    my @ip =  keys %master_info;
    return $ip[0];
}
sub get_cvm_ip{
    my @ip =  keys %cvm_info;
    return $ip[0];
}
sub get_local_hvn_ip {
    my $cmd = 'ifconfig  | grep addr: | grep inet6 -v  | perl -nle  \'  print  m/addr:(\S+) /  \'';
    my @ip =  qx($cmd);
    chomp(@ip);
### @ip 
    my @hvn_ip ;
    foreach my $local_ip (@ip){
        push @hvn_ip, grep { $_ eq $local_ip} keys %hvn_info ;
    }
    if ( scalar @hvn_ip == 0){
        local $" = "  ";
        my @tmp = keys %hvn_info;
        die "current machine  is not in  hvn ip list !
             current ip list;
             @ip
             hvn  ip list :
             @tmp
            "
             ;
    } elsif ( scalar @hvn_ip == 1){
        return $hvn_ip[0];
    }else {
        die "currnet machine match more than one ip in hvn ip list!
             matched ip:
             @hvn_ip
             Please Correct  your ip config or hvn ip list !";
    }
}
sub check_ip{
    my $ip = shift;
    if($ip =~ /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/)
    {
        return 1;
    }else {
        return 0;
    }
}

sub analyze_ip_map{
    my $input_filename = "ip_map";
    my $output_filename = "hosts";
    open FH , "< $input_filename" or die "can not find ip_map";
    system ("touch hosts");
    open FH1, "> $output_filename" or die "can not open hosts";
    print FH1 "127.0.0.1 localhost\n";
    while(<FH>){
      s/^\s*//; #delete head blank
      s/\s*$//; #delete last blank
      s/\s+/ /g;#delete unnecessary blank 
      next if /^#/; #skip comment
      my ($ip1,$name,$ip2) = split / /;
      &check_ip($ip1) or die "$ip1 is not a ip!";
      &check_ip($ip2) or die "$ip2 is not a ip!";
      if ($name eq 'hvn1')  {
       $master_info{$ip1}= {
          hostname => $name,
          ip2      => $ip2
        }; 
        
      } elsif($name eq 'cvm'){
    
       $cvm_info{$ip1}= {
          hostname => $name,
          ip2      => $ip2
        }; 
        
       } elsif ($name =~ 'coc'){
       $coc_info{$ip1}= {
          hostname => $name,
          ip2      => $ip2
        }; 
       } elsif ($name =~ 'csp'){
       $csp_info{$ip1}= {
          hostname => $name,
          ip2      => $ip2
        }; 
        
       } elsif ($name =~ /hvn/){
       $hvn_info{$ip1}= {
          hostname => $name,
          ip2      => $ip2
        }; 
       } else{
        print "[ERROR] $ip1  $name  $ip2 \n"; 
        die "die  in [analyze_ip_map]";
       }
        print FH1 "$ip1  $name\n";
    }
    close FH;
    close FH1;
}


sub master{
    my @nodelist= &get_nodelist; 
    my $master_ip = &get_master_ip; 

### set_localtime... 
    &set_localtime();
### rename_cloudview...
    &rename_cloudview;
### set no passwd for all node...
    &no_passwd(@nodelist);

### send cloudview_deploy to all node...
    foreach(keys %hvn_info){
    &send_tool($_);
    }

### set up ntp server...
    &time_sync_server();

### do universe things... 
### %master_info
    &universe(&get_master_ip,$master_info{$master_ip}{'hostname'},$master_info{$master_ip}{'ip2'});

#    &hyper_install();
}

&analyze_ip_map;

if  ( @ARGV ){ 
   my $type = $ARGV[0];          
    if ( $type eq 'hvn') {
      my $hvn_ip = &get_local_hvn_ip;
      if( $ARGV[1]){
         my $hvn_ip_get =  $ARGV[1];
         if( $hvn_ip_get ne $hvn_ip )
         {
          die "parameter $hvn_ip_get is not currnet's hvn manage ip
               use $0 hvn  or $0 hvn $hvn_ip  instead ! 
               " ;
           }
        }
      &hvn($hvn_ip) ;
    }elsif ($type eq 'cvm'){
      &cvm ; 
    }elsif($type eq 'batch_hvn')
    {
     &batch_hvn; 
    }
}else{
&master;
}



